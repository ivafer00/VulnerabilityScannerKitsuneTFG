package es.urjc.WebElements.Form;

import com.google.gson.Gson;
import es.urjc.WebElements.ApiObjectParser;
import es.urjc.WebElements.ServerResponse;
import es.urjc.WebElements.WebSyntaxWrapper;
import org.openqa.selenium.devtools.v101.network.model.Headers;

import java.util.*;

public class Form {

    private String id;

    private String currentUrl;
    private String submitUrl;
    private String method;

    private Headers headers;
    private HashMap<String, Input> inputs;
    private final ArrayList<String> inputNames = new ArrayList<>();

    private int statusCode;

    public Form(){

    }

    public Form(String currentUrl, String submitUrl, String method){
        this.currentUrl = currentUrl;
        this.submitUrl = submitUrl;
        this.method = method;
        this.inputs = new HashMap<>();
        this.headers = new Headers(new HashMap<>());
        this.statusCode = 0;
    }

    /*
    *  Basic operations
    */

    public void setId(String id) {
        this.id = id;
    }


    public String getCurrentUrl() {
        return currentUrl;
    }

    public String getSubmitUrl() {
        return submitUrl;
    }

    public String getMethod() {
        return method;
    }

    public ArrayList<String> getInputsInformation() {
        ArrayList<String> inputInformation = new ArrayList<>();
        for (Input input: this.inputs.values()) {
            inputInformation.add(input.toString());
        }
        return inputInformation;
    }

    public void addInput(String name, Input input){
        this.inputs.put(name, input);
        this.inputNames.add(name);
    }

    public void setInputs(HashMap<String, Input> inputs) {
        this.inputs = inputs;
        this.inputNames.addAll(inputs.keySet());
    }

    public Input getInputByIndex(int index){
        if(index<this.numberOfInputs()) return this.inputs.get(this.inputNames.get(index));
        else return null;
    }

    public void setInputByIndex(int index, Input input){
        if(index<this.numberOfInputs()) this.inputs.put(this.inputNames.get(index), input);
    }

    public int numberOfInputs(){
        return this.inputNames.size();
    }

    public boolean containsInput(String inputKey){
        return this.inputs.containsKey(inputKey);
    }

    public boolean isSameForm(String url, String method){
        return url.equals(this.submitUrl) && method.equals(this.method);
    }

    public int getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(int statusCode) {
        if(!(ServerResponse.isSatisfactoryResponse(this.statusCode) ||ServerResponse.isRedirection(this.statusCode))){
            if(this.statusCode == 0)this.statusCode = statusCode;
            else if(ServerResponse.isSatisfactoryResponse(statusCode) ||ServerResponse.isRedirection(statusCode)) this.statusCode = statusCode;
            else if(ServerResponse.isServerError(statusCode)) this.statusCode = statusCode;
        }
    }

    public boolean isLogoutForm(){
        return this.submitUrl.contains("logout");
    }

    /*
    *   More complex functions
    */

    /*
    *   Fill the form's inputs with the default strategy (Unexpected -> Pre-allocated -> Value).
    */
    public void fillInputValuesByPriority(){
        for(Map.Entry<String, Input> entry: this.inputs.entrySet()) {
            entry.getValue().fillValue();
            this.inputs.put(entry.getKey(), entry.getValue());
        }
    }

    /*
    *   Return the first injectable input of the form
    */
    public String nextInjectableInput(){
        int index = 0;
        while (index<this.inputNames.size()) {
            if(this.getInputByIndex(index).haveSameValue("##value_to_fill##")) return this.inputNames.get(index);
            index++;
        }
        return null;
    }

    /*
    *   Update the form parameters with an url encoded string.
    */
    public void updateParameters(String formParameters, String contentType){
        if(contentType.equals("application/x-www-form-urlencoded")){
            HashMap<String, String> parameters  = WebSyntaxWrapper.decodeParamsString(formParameters);
            for(Map.Entry<String, String> entry : parameters.entrySet()){
                if(this.containsInput(entry.getKey())){
                    if(!this.inputs.get(entry.getKey()).haveSameValue(entry.getValue())){
                        Input input = this.inputs.get(entry.getKey());
                        input.setUnexpectedValue(entry.getValue());
                        this.inputs.put(entry.getKey(), input);
                    }
                } else {
                    this.inputs.put(entry.getKey(), new Input("", entry.getKey(), "addedByJS", entry.getValue(), false));
                    this.inputNames.add(entry.getKey());
                }
            }
        }
    }

    /*
    *   Parse a payload with the information related to this form.
    */
    public String parsePayload(String payload, String inputName){
        String resultPayload = payload.replaceAll("#form_id#", this.id);
        return resultPayload.replaceAll("#input_id#", inputName);
    }

    /*
    *   Encode the set of params in XHR format
    */
    public String parseParams(String payload){
        StringBuilder builder = new StringBuilder();
        if(this.currentUrl.equals("/API")){
            HashMap<String, String> values = new HashMap<>();
            for(Map.Entry<String, Input> entry : this.inputs.entrySet()){
                String key = entry.getKey();
                Input value = entry.getValue();
                if(value.getValue().equals("##value_to_fill##")){
                    values.put(key, this.parsePayload(payload, key));
                } else {
                    values.put(key, value.getValue());
                }
            }
            return new Gson().toJson(values);
        }
        String initValue = this.method.equals("GET")? "" : "formData.append(\"";
        String separationValue = this.method.equals("GET")? "=" : "\", \"";
        String endValue = this.method.equals("GET")? "&" : "\");\n";

        for(Map.Entry<String,Input> entry : this.inputs.entrySet()) {
            String inputName = entry.getKey();
            String inputValue = entry.getValue().getValue();
            if(inputValue.equals("##value_to_fill##")){
                builder.append(initValue).append(inputName).append(separationValue).append(this.parsePayload(payload, inputName)).append(endValue);
            } else {
                builder.append(initValue).append(inputName).append(separationValue).append(inputValue).append(endValue);
            }
        }

        if(this.method.equals("GET") && !builder.isEmpty()) builder.deleteCharAt(builder.length()-1);
        return builder.toString();
    }

    /*
    *   Get a string with the XHR request. If a strategy is applied, the param "value" will replace the ##value_to_fill## tag.
    */
    public String getXHR(String value){
        StringBuilder builder = new StringBuilder("var callback = arguments[0];\n");
        builder.append("""
                var result = [];

                var client = new XMLHttpRequest();
                var startTime = new Date();
                """);

        if(this.currentUrl.equals("/API")){
            builder.append("client.open(\"").append(this.method).append("\", \"").append(this.parseSubmitUrl(value).replaceAll("\\\"", "\\\\\"")).append("\", true);\n");
            builder.append("client.setRequestHeader('Content-type', 'application/json');\n");
        } else if(this.method.equals("GET")){
            String params = this.parseParams(value);
            builder.append("client.open(\"").append(this.method).append("\", \"").append(this.parseSubmitUrl(value));
            if(!params.isEmpty()){
                builder.append("?");
                builder.append(this.parseParams(value));
            }
            builder.append("\", true);\n");
        } else {
            builder.append("client.open(\"").append(this.method).append("\", \"").append(this.parseSubmitUrl(value)).append("\", true);\n");
            builder.append("var formData = new FormData();\n");
            builder.append(this.parseParams(value));
        }

        builder.append("""
                client.onreadystatechange = function() {
                \tif (client.readyState == 4) {
                \t\tvar elapsedTime = new Date() - startTime;
                \t\tresult.push(client.responseURL);
                \t\tresult.push(client.status.toString());
                \t\tresult.push(client.responseText);
                \t\tresult.push(elapsedTime.toString());
                \t\tcallback(JSON.stringify(result));
                \t}
                };
                """);

        if(this.method.equals("GET")){
            builder.append("client.send();\n");
        } else if(!this.currentUrl.equals("/API")) {
            builder.append("client.send(formData);\n");
        } else {
            builder.append("client.send('").append(this.parseParams(value)).append("');");
        }
        return builder.toString();
    }

    /*
    *   Get the XHR request without any modification.
    */
    public String getXHR(){
        return this.getXHR("");
    }

    /*
    *   Check if it's a valid login form.
    */
    public int isValidLoginForm(String loginUrl){
        int score = 0;
        if(this.submitUrl.equals(loginUrl)){score += 3;}
        else if(this.submitUrl.toLowerCase().contains("login") || this.submitUrl.toLowerCase().contains("log_in")){score += 2;}

        int visibleInputs = 0;
        int usernameInputs = 0;
        int passwordInputs = 0;
        for(Input input: this.inputs.values()){
            if(input.isUsernameValue()){usernameInputs += 1;}
            if(input.isPasswordValue()){passwordInputs += 1;}
            if(input.isVisible()){visibleInputs += 1;}
        }
        if(usernameInputs == 1 && passwordInputs == 1 && (visibleInputs == 2 || visibleInputs == 3)){score += 1;}
        else return 0;
        return score;
    }

    public void setUsername(String username){
        for(int i=0;i<this.inputNames.size();i++){
            Input input = this.getInputByIndex(i);
            if(input.isUsernameValue()){
                input.setValue(username);
                this.setInputByIndex(i, input);
            }
        }
    }

    public void setPassword(String password){
        for(int i=0;i<this.inputNames.size();i++){
            Input input = this.getInputByIndex(i);
            if(input.isPasswordValue()){
                input.setValue(password);
                this.setInputByIndex(i, input);
            }
        }
    }


    /*
    *   Security functions
    */

    /*
    *   Check if there is a CSRF token inside the inputs.
    */
    public boolean haveAPossibleCSRFToken(){
        for(Input input : this.inputs.values()){
            if(input.isAPossibleCSRFToken()) return true;
        }
        return false;
    }

    public String getId() {
        return id;
    }

    @Override
    public String toString() {
        return "Form{" +
                "currentUrl='" + currentUrl + '\'' +
                ", submitUrl='" + submitUrl + '\'' +
                ", method='" + method + '\'' +
                ", inputs=" + inputs +
                "}\n";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Form form = (Form) o;
        return Objects.equals(submitUrl, form.submitUrl) && Objects.equals(method, form.method);
    }

    @Override
    public int hashCode() {
        return Objects.hash(submitUrl, method);
    }

    public void setHeaders(Headers headers) {
        this.headers = headers;
    }

    public boolean containsHeader(String headerName){
        return this.headers.containsKey(headerName);
    }

    public void setSubmitUrl(String submitUrl) {
        this.submitUrl = submitUrl;
    }

    public String parseSubmitUrl(String value){
        if(this.submitUrl.contains("{text_payload}")){
            value = this.parsePayload(value, "url");
            return this.submitUrl.replaceAll("\\{number}", "1").replaceAll("\\{text_payload}", value);
//            this.submitUrl = this.submitUrl.replaceAll("\\{number}", "1").replaceAll("\\{text_payload}", "{text}");
//            return submitUrl;
        } else return this.submitUrl.replaceAll("\\{number}", "1").replaceAll("\\{text}", "a");
    }

    public boolean isApiForm(){
        return this.currentUrl.equals("/API");
    }
}
