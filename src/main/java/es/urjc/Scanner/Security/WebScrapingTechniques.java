package es.urjc.Scanner.Security;

import es.urjc.WebElements.ApiObjectParser;
import es.urjc.WebElements.Form.Form;
import es.urjc.WebElements.Form.Input;
import es.urjc.WebElements.UrlRelation;
import es.urjc.WebElements.WebSyntaxWrapper;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class WebScrapingTechniques {

    /*
    *   This technique search for attributes from web elements that contain URLs inside the desired domain.
    *   The method return a set of UrlRelations or an empty set, if there is no web element that matches the requirements.
    *
    *   @param scraper  the Scraper object
    *   @param tagName  the name of the tag that should be checked
    *   @param field    the name of the field which contains the url
    *
    *   @return the set of detected UrlRelations
    */
    public static HashSet<UrlRelation> detectHTMLURLRelations(WebScraper scraper, String tagName, String field) {
//        System.out.println(scraper.getCurrentUrl());
        HashSet<UrlRelation> urls = new HashSet<>();
        try {
            ArrayList<WebElement> links = scraper.findElementsByTagName(tagName);
            for (WebElement link : links) {
                try {
                    String attribute = link.getAttribute(field);
                    if (attribute != null && scraper.isInsideDomain(attribute) && !attribute.contains("del")) {
                        scraper.addUrlToVisit(attribute);
                        urls.add(new UrlRelation(scraper.getCurrentUrl(), attribute, tagName));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return urls;
        } catch (NoSuchElementException noElement) {
            // There are no elements with that tagName
            return urls;

        }
    }

    /*
    *
    */

    public static HashSet<UrlRelation> detectJSURLRelation(WebScraper scraper){

        HashSet<UrlRelation> urls = WebScrapingTechniques.detectHTMLURLRelations(scraper, "script", "src");
        for (UrlRelation jsFile: urls) {
            scraper.addUrlToVisit(jsFile.getEndUrl());
        }

        String baseCode = scraper.getPageSource();
        String[] locations = baseCode.split("location");

        for (int i = 1; i<locations.length; i++) {
            String jsUrlRedirect = checkLocationPair(locations[i-1], locations[i]);

            if(jsUrlRedirect != null) {
                if(!WebSyntaxWrapper.isAbsoluteUrl(jsUrlRedirect)){
                    jsUrlRedirect = WebSyntaxWrapper.relativeURLToAbsoluteUrl(scraper.getCurrentUrl(), jsUrlRedirect);
                }
                urls.add(new UrlRelation(scraper.getCurrentUrl(), jsUrlRedirect, "js"));
                scraper.addUrlToVisit(jsUrlRedirect);
            }
        }

        return urls;
    }


    /*
    *   This method identifies the most common ways to redirect using JavaScript or JQuery.
    *   These ways are described below:
    *       1. location.href = "https://www.google.es"
    *       2. location.replace("https://www.google.es")
    *       3. document.location = "https://www.google.es"
    *       4. $(location).attr('href', "https://www.google.es")
    *
    *   @param prev the string before the word "location"
    *   @param post the string after the word "location"
    *
    *   @return the redirecting URL if its found. Otherwise, null.
    */
    private static String checkLocationPair(String prev, String post){

        if(post.matches("(?s)^\\.href {0,}= {0,}.*$")){
            return WebSyntaxWrapper.parseStringValue(post.replaceAll("^\\.href {0,}= *", ""));

        } else if(post.matches("(?s)^\\.replace\\( {0,}.*$")){
            return WebSyntaxWrapper.parseStringValue(post.replaceAll("^\\.replace\\( {0,}", ""));

        } else if(post.matches("(?s)^ {0,}= {0,}.*$")){
            return WebSyntaxWrapper.parseStringValue(post.replaceAll("^ {0,}= {0,}", ""));

        } else if(post.matches("(?s)^\\)\\.attr\\( {0,}(\'|\")href(\'|\") {0,}, {0,}.*$") && prev.endsWith("$(")){
            return WebSyntaxWrapper.parseStringValue(post.replaceAll("^\\)\\.attr\\( {0,}(\'|\")href(\'|\") {0,}, {0,}", ""));

        } else {
            return null;
        }
    }

    /*
    *   This technique collects all the forms from the current URL.
    *   The method asserts that the provided URL is inside the domain and returns a list with all the forms detected in
    *   the document.
    *
    *   @param scraper the Scraper object
    *
    *   @return the list of detected forms
    */
    public static void detectForms(WebScraper scraper){
        String currentUrl = scraper.getCurrentUrl();
        if(scraper.isInsideDomain(currentUrl)) {
            try {
                ArrayList<WebElement> forms = scraper.findElementsByTagName("form");
                for (WebElement form : forms) {
                    createForm(scraper,  currentUrl, form);
                }
            } catch (NoSuchElementException noElement) {
                //
            }
        }
    }

    public static void createForm(WebScraper scraper, String currentUrl, WebElement element){

        try {
            String method = element.getAttribute("method").toUpperCase();
            String submitUrl = WebSyntaxWrapper.getUrlFromGETRequest(element.getAttribute("action"));
            if(method.equals("DELETE") || submitUrl.contains("del")) return;
            scraper.addUrlRelation(new UrlRelation(currentUrl, element.getAttribute("action"), "FORM"));
            Form form = new Form(currentUrl, submitUrl, method);
            HashMap<String, Input> formInputs = new HashMap<>();

            WebElement submitButton = null;

            ArrayList<WebElement> inputs = new ArrayList<>(element.findElements(By.tagName("input")));
            for (WebElement input : inputs) {

                String name = input.getAttribute("name");
                String id = input.getAttribute("id");
                String value = input.getAttribute("value");
                String type = input.getAttribute("type");
                boolean isVisible = input.isDisplayed();

                if (type.equals("submit")) {
                    submitButton = input;
                }

                Input scrapedInput = new Input(id, name, type, value, isVisible);

                if (value.isEmpty() || value.isBlank()) {
                    if (type.equals("number")) {
                        scraper.executeScript("document.getElementsByName('" + name + "')[0].value = 1;");
                    } else if (type.equals("email") || type.equals("password") || type.equals("text")) {
                        try {
                            scraper.executeScript("document.getElementsByName('" + name + "')[0].value = 'a';");
                        } catch (Exception e) {
//                            System.out.println(currentUrl);
//                            e.printStackTrace();
                        }
                    }

                    scrapedInput.setValueAsRandom();
                } else {
                    scrapedInput.setValueAsPreallocated();
                }

                formInputs.put(name, scrapedInput);

            }

            try {
                ArrayList<WebElement> textareas = new ArrayList<>(element.findElements(By.tagName("textarea")));
                for (WebElement textarea : textareas) {

                    String name = textarea.getAttribute("name");
                    String id = textarea.getAttribute("id");
                    String value = textarea.getAttribute("value");
                    boolean isVisible = textarea.isDisplayed();

                    Input scrapedInput = new Input(id, name, "textarea", value, isVisible);

                    if (value.isEmpty() || value.isBlank()) {
                        try {
                            scraper.executeScript("document.getElementsByName('" + name + "')[0].value = 'a';");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        scrapedInput.setValueAsRandom();
                    } else {
                        scrapedInput.setValueAsPreallocated();
                    }

                    formInputs.put(name, scrapedInput);
                }
            } catch (NoSuchElementException noSuchElementException){
//                System.out.println();
            }

            form.setInputs(formInputs);

            scraper.captureNetworkRequests(form);

            if (submitButton != null) {
                String formAction = submitButton.getDomAttribute("formAction");
                if (formAction != null && !formAction.isEmpty() && !formAction.isBlank())
                    form.setSubmitUrl(WebSyntaxWrapper.relativeURLToAbsoluteUrl(scraper.getProtocol() + scraper.getBaseUrl(), formAction));
                submitButton.click();
            } else {
                element.submit();
            }

            scraper.stopCapturingRequest();
        } catch (Exception e){
            e.printStackTrace();
            scraper.stopCapturingRequest();
        }
    }

    /*
    *
    *
    */
    public static void parseSwaggerInformation(WebScraper scraper){
        scraper.visitUrl(scraper.getProtocol() + scraper.getBaseUrl() + "/swagger-ui/");
        try {
            Thread.sleep(1000);
            ArrayList<WebElement> totalAPIs = scraper.findElementsByClassName("expand-operation");
            System.out.println("TOTAL APIS: " + totalAPIs.size());
            for(WebElement api : totalAPIs){
                api.click();
                ArrayList<WebElement> methods = scraper.findElementsByClassName("opblock-summary");
//                System.out.println("TOTAL METHODS: " + methods.size());
                for(WebElement method : methods){
                    String methodTypeAndPath = method.getText();
                    String methodType = methodTypeAndPath.split("\n")[0];
                    String path = methodTypeAndPath.split("\n")[1];
//                    System.out.println(path);
//                    System.out.println(methodType);

                    if(!methodType.equals("DELETE") && ! path.contains("del")){
                        method.click();
                        Thread.sleep(1000);
                        ArrayList<WebElement> tbodies = scraper.findElementsByTagName("tbody");                // SIZE: 1 = RESPONSE STATUS; 2 = PARAMS + RESPONSE STATUS
//                        System.out.println(tbodies.size());
                        Form form = new Form("/API", scraper.getProtocol() + scraper.getBaseUrl() + path, methodType);
                        if(tbodies.size() > 1){
                            WebElement paramsTBody = tbodies.get(0);
                            List<WebElement> params = paramsTBody.findElements(By.xpath("./child::*"));
                            List<WebElement> types = scraper.findElementsByClassName("parameter__type");
                            List<WebElement> tabLinks = scraper.findElementsByClassName("tablinks");
                            int totalObjects = 0;
                            for(int i = 0; i<params.size();i++){
                                WebElement param = params.get(i);
                                String in = param.getDomAttribute("data-param-in");                     // (body), (path)
                                String name = param.getAttribute("data-param-name");                    // NAME
                                String type = types.get(i).getText();                                         // STRING, INTEGER, OBJECT
//                                System.out.println(in);
                                if(in.equals("path")){
                                    form.setSubmitUrl(form.getSubmitUrl().replaceAll("\\{" + name + "}", "{" + ApiObjectParser.parseType(type) + "}"));
                                } else if(in.equals("body")) {
                                    if(type.equals("object")){
                                        ApiObjectParser objectParser = new ApiObjectParser();
                                        WebElement changeToModelTab = tabLinks.get(totalObjects*2+1);
                                        changeToModelTab.click();
                                        Thread.sleep(1000);
                                        List<WebElement> objectParams = scraper.findElementsByClassName("property-row");
                                        for(WebElement objectParam : objectParams){
//                                            System.out.println(objectParam.getText());
                                            String [] currentParam = ApiObjectParser.parseText(objectParam.getText());
//                                    System.out.println(currentParam);
                                            if(currentParam != null){
                                                String currentParamType = ApiObjectParser.parseType(currentParam[1]);
                                                String value = "";
//                                                if(currentParamType.equals("object")){
//                                                    // DO STUFF
//                                                } else
                                                if(currentParamType.equals("number")){
                                                    value = "1";
                                                } else if(currentParamType.equals("text")){
                                                    value = "a";
                                                }
                                                Input input = new Input(currentParam[0], currentParam[0], currentParamType, value, false);
//                                                objectParser.setParam(currentParam[0], input);
                                                form.addInput(currentParam[0], input);
                                            }
//                                    System.out.println(objectParam.getText());
                                        }
//                                        form.addInput(name, new Input("", name, type, objectParser.toJsonString(), false));
                                        changeToModelTab.click();
                                        totalObjects += 1;
                                    } else {
                                        form.addInput(name, new Input("", name, type, "", false));
                                    }
                                }
                            }
//                        System.out.println(path);
                            if(params.size() != 0) scraper.addForm(form);
                        }
                        method.click();
//                        System.out.println(form.getSubmitUrl());
//                        System.out.println(form.getInputsInformation());
//                        System.out.println("-------------------");
                    }
                }
                api.click();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
