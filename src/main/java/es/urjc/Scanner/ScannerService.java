package es.urjc.Scanner;

import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class ScannerService {

    private final ConcurrentHashMap<String, List<Scanner>> scannerMap = new ConcurrentHashMap<>();

//    public void addScanner(String username, String id, Scanner scanner){
//        ArrayList<Scanner> totalActiveScanners = new ArrayList<>();
//        if(this.scannerMap.containsKey(username)) totalActiveScanners = this.scannerMap.get(username);
//        scanner.setId(username + "-" + id);
//        totalActiveScanners.add(scanner);
//        this.scannerMap.put(username, totalActiveScanners);
//    }

    public void addScanner(String username, String id, Scanner scanner){
        this.scannerMap.compute(username, (key, value) -> {
           List<Scanner> currentUserScanners = value;
           if(currentUserScanners == null) currentUserScanners = Collections.synchronizedList(new ArrayList<>());
           scanner.setId(username + "-" + id);
           currentUserScanners.add(scanner);
           return currentUserScanners;
        });
    }

//    public void removeScanner(String username, Scanner scanner){
//        ArrayList<Scanner> totalActiveVulnerabilityScanners = this.scannerMap.get(username);
//        totalActiveVulnerabilityScanners.remove(scanner);
//        this.scannerMap.put(username, totalActiveVulnerabilityScanners);
//    }

    public void removeScanner(String username, Scanner scanner){
        this.scannerMap.compute(username, (key, currentUserScanners) -> {
            if(currentUserScanners == null) return null;
            currentUserScanners.remove(scanner);
            return currentUserScanners;
        });

    }

    public boolean haveActiveScanners(String username){
        return this.scannerMap.containsKey(username) && this.scannerMap.get(username).size() != 0;
    }

//    public Scanner getScanner(String username, String id){
//        if(this.scannerMap.containsKey(username)){
//            List<Scanner> userActiveScanners = this.scannerMap.get(username);
//            Scanner provisionalScanner = new Scanner(username + "-" + id);
//            for (Scanner scanner: userActiveScanners) {
//                if(provisionalScanner.equals(scanner)){
//                    return scanner;
//                }
//            }
//        }
//        return null;
//    }
    public Scanner getScanner(String username, String id){
        if(this.scannerMap.containsKey(username)){
            Scanner provisionalScanner = new Scanner(username + "-" + id);
            Scanner scanner = null;
            List<Scanner> userActiveScanners = this.scannerMap.get(username);
            synchronized (userActiveScanners){
                int index = userActiveScanners.indexOf(provisionalScanner);
                if(index != -1) scanner = userActiveScanners.get(index);
            }
            return scanner;
        }
        return null;
    }
}
