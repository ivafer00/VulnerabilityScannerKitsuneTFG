package es.urjc.Scanner;

import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased.BooleanBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased.ErrorBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.TimeBased.TimeBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.XSS.XSSInjection;

import java.util.ArrayList;
import java.util.List;

public class ScanningOptions {

    private String initialUrl;
    private String baseUrl;
    private Boolean scrapping;

    private String username;
    private String password;

    private final Boolean xssScan;
    private final Boolean sqlInjectionScan;
    private final Boolean csrfScan;
    private final Boolean apiExploration;
    private final Boolean noSecureChannel;
    private final Boolean improperErrorHandling;

    private final Boolean allAPIMethods;
    private final Boolean possibleTemplateInjection;
    private final Boolean entityRelations;
    private final Boolean databaseCommunication;

    private final List<XSSInjection> xssIdPayloads;
    private final List<TimeBasedSQLi> timeBasedSqlInjectionIdPayloads;
    private final List<ErrorBasedSQLi> errorBasedSqlInjectionIdPayloads;
    private final List<BooleanBasedSQLi> booleanBasedSQLinjectionIdPayloads;

    public ScanningOptions(String initialUrl, String baseUrl, Boolean scrapping, String username, String password, Boolean xssScan, Boolean sqlInjectionScan, Boolean csrfScan, Boolean apiExploration,
                           List<XSSInjection> xssIdPayloads, List<TimeBasedSQLi> timeBasedSqlInjectionIdPayloads, List<ErrorBasedSQLi> errorBasedSqlInjectionIdPayloads, List<BooleanBasedSQLi> BooleanBasedSQLinjectionIdPayloads,
                           Boolean noSecureChannel, Boolean improperErrorHandling, Boolean allAPIMethods, Boolean possibleTemplateInjection, Boolean entityRelations, Boolean databaseCommunication) {
        this.initialUrl = initialUrl;
        this.baseUrl = baseUrl;
        this.scrapping = scrapping;
        this.username = username;
        this.password = password;
        this.xssScan = xssScan;
        this.sqlInjectionScan = sqlInjectionScan;
        this.csrfScan = csrfScan;
        this.apiExploration = apiExploration;
        this.noSecureChannel = noSecureChannel;
        this.improperErrorHandling = improperErrorHandling;

        this.xssIdPayloads = xssIdPayloads;
        this.timeBasedSqlInjectionIdPayloads = timeBasedSqlInjectionIdPayloads;
        this.errorBasedSqlInjectionIdPayloads = errorBasedSqlInjectionIdPayloads;
        this.booleanBasedSQLinjectionIdPayloads = BooleanBasedSQLinjectionIdPayloads;

        this.allAPIMethods = allAPIMethods;
        this.possibleTemplateInjection = possibleTemplateInjection;
        this.entityRelations = entityRelations;
        this.databaseCommunication = databaseCommunication;
    }

    public String getInitialUrl() {
        return initialUrl;
    }

    public void setInitialUrl(String initialUrl) {
        this.initialUrl = initialUrl;
    }

    public String getBaseUrl() {
        return baseUrl;
    }

    public void setBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
    }

    public Boolean getScrapping() {
        return scrapping;
    }

    public void setScrapping(Boolean scrapping) {
        this.scrapping = scrapping;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Boolean getXssScan() {
        return xssScan;
    }

    public Boolean getSqlInjectionScan() {
        return sqlInjectionScan;
    }

    public Boolean getCsrfScan() {
        return csrfScan;
    }

    public Boolean getApiExploration() {
        return apiExploration;
    }

    public Boolean getAllAPIMethods() {
        return allAPIMethods;
    }

    public Boolean getPossibleTemplateInjection() {
        return possibleTemplateInjection;
    }

    public Boolean getEntityRelations() {
        return entityRelations;
    }

    public Boolean getDatabaseCommunication() {
        return databaseCommunication;
    }

    public Boolean getNoSecureChannel() {
        return noSecureChannel;
    }

    public Boolean getImproperErrorHandling() {
        return improperErrorHandling;
    }

    public List<XSSInjection> getXssIdPayloads() {
        return xssIdPayloads;
    }


    public List<TimeBasedSQLi> getTimeBasedSqlInjectionIdPayloads() {
        return timeBasedSqlInjectionIdPayloads;
    }

    public List<ErrorBasedSQLi> getErrorBasedSqlInjectionIdPayloads() {
        return errorBasedSqlInjectionIdPayloads;
    }


    public List<BooleanBasedSQLi> getBooleanBasedSQLinjectionIdPayloads() {
        return booleanBasedSQLinjectionIdPayloads;
    }

    public Boolean hasCredentials(){
        return !this.password.isEmpty() || !this.username.isEmpty();
    }
}
