package es.urjc.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Component
public class UserAuthenticationProvider implements AuthenticationProvider {


    @Autowired
    private UserService userService;

    @Override
    public Authentication authenticate(Authentication auth) throws AuthenticationException {
        Optional<User> user = userService.getUser(auth.getName());
        String password = (String) auth.getCredentials();
        if (user.isEmpty() || !new BCryptPasswordEncoder().matches(password, user.get().getPasswordHash())) {
            throw new BadCredentialsException("Wrong credentials");
        }

        List<GrantedAuthority> roles = new ArrayList<>();
        for (String role : user.get().getRoles()) {
            roles.add(new SimpleGrantedAuthority(role));
        }

        return new UsernamePasswordAuthenticationToken(user.get().getUsername(), password, roles);
    }

    @Override
    public boolean supports(Class<?> authentication) {
        // TODO Auto-generated method stub
        return true;
    }

}
