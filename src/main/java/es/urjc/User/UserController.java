package es.urjc.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping("/register")
    public String tryRegister(Model model, @RequestParam String username, @RequestParam String password) {

        Optional<User> userIfExists = userService.getUser(username);
        if (userIfExists.isPresent()) {

            model.addAttribute("errorMessage", "El usuario ya existe. Prueba con otro nombre de usuario.");
            return "error";

        } else {

            List<String> roles = new ArrayList<>();
            roles.add("ROLE_USER");
            String passwordHashed = new BCryptPasswordEncoder().encode(password);
            User userRegistered = new User(username, passwordHashed, roles);

            if (userService.addUser(userRegistered)) {
                model.addAttribute("okMessage", "Te has registrado correctamente. Ya puedes iniciar sesión.");
                return "ok";
            } else {
                model.addAttribute("errorMessage", "No se ha podido registrar tu cuenta. Compruébalo e inténtalo de nuevo.");
                return "error";
            }
        }
    }

    @RequestMapping("/logout")
    public String tryLogOut(HttpSession session, Model model) {
        if (isValidSession(session)) {
            model.addAttribute("okMessage", "Has cerrado la sesión. ¡Hasta pronto!");
            session.invalidate();
            return "ok";
        } else {
            model.addAttribute("errorMessage", "Hubo un error al cerrar la sesión. Inténtalo de nuevo.");
            return "error";
        }
    }

    private boolean isValidSession(HttpSession session) {
        return session.getAttribute("username") != null && userService.isValidUser(session.getAttribute("username").toString());
    }
}
