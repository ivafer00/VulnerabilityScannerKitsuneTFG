package es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased;

import es.urjc.Report.Vulnerabilities.FormBased.Injection.SQLi.ErrorBasedSQLiReport;
import es.urjc.Scanner.Security.WebScraper;
import es.urjc.Vulnerabilities.FormBased.Injection.Injection;
import es.urjc.WebElements.Form.FillStrategies.FillOneByOne;
import es.urjc.WebElements.Form.FillStrategies.FillStrategy;
import es.urjc.WebElements.Form.Form;
import es.urjc.Report.Report;
import es.urjc.WebElements.ServerResponse;

import javax.persistence.Entity;
import java.util.List;
import java.util.stream.Collectors;

@Entity
public class ErrorBasedSQLi extends Injection {

    public ErrorBasedSQLi(){
        super("");
    }

    public ErrorBasedSQLi(String payload){
        super(payload);
    }

    @Override
    public FillStrategy getFillStrategy(Form form) {
        return new FillOneByOne(form);
    }

    @Override
    public Report detect(WebScraper webScraper, Form form) {
        String xmlHttpRequest = form.getXHR(webScraper.parsePayload(super.parsePayload()));
        ServerResponse response = webScraper.sendXHR(xmlHttpRequest);
        form.setStatusCode(response.getStatus());

        if(response.isValidResponse()){
            List<String> message = ErrorBasedSQLi.checkForErrorMessage(response.getResponseText());
            if(!message.isEmpty()){
                ErrorBasedSQLiReport report = new ErrorBasedSQLiReport();
                report.addRequest(response.getRequest());
                report.addResponse(response.getResponseText());
                report.addVulnerableInput(form.nextInjectableInput());
                report.setPayloadId(String.valueOf(this.getId()));
                report.setFormId(form.getId());
                return report;
            }
        }
        return null;
    }

    public static List<String> checkForErrorMessage(String htmlResponse){
        return htmlResponse.lines().filter(a -> a.contains("You have an error in your SQL syntax")).collect(Collectors.toList());
    }

}
