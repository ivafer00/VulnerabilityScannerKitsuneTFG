package es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased;

import es.urjc.Report.Vulnerabilities.FormBased.Injection.SQLi.BooleanBasedSQLiReport;
import es.urjc.Scanner.Security.WebScraper;
import es.urjc.Vulnerabilities.FormBased.Injection.Injection;
import es.urjc.WebElements.Form.FillStrategies.FillOneByOne;
import es.urjc.WebElements.Form.FillStrategies.FillStrategy;
import es.urjc.WebElements.Form.Form;
import es.urjc.Report.Report;
import es.urjc.WebElements.ServerResponse;
import es.urjc.WebElements.WebSyntaxWrapper;

import javax.persistence.Entity;
import java.security.SecureRandom;

@Entity
public class BooleanBasedSQLi extends Injection {

    public BooleanBasedSQLi(){
        super("");
    }

    public BooleanBasedSQLi(String payload){
        super(payload);
    }

    @Override
    public FillStrategy getFillStrategy(Form form) {
        return new FillOneByOne(form);
    }

    @Override
    public Report detect(WebScraper webScraper, Form form) {
        int randomLength = randomValue(1, 10);
        String payload = super.parsePayload();

        int firstValue = BooleanBasedSQLi.randomValueOfLength(randomLength);
        String trueRequest = form.getXHR(webScraper.parsePayload(parsePayloadTrueStatement(payload, firstValue)));
        ServerResponse trueResponse = webScraper.sendXHR(trueRequest);
        form.setStatusCode(trueResponse.getStatus());

        int secondValue = BooleanBasedSQLi.randomValueOfLength(randomLength);
        while (secondValue == firstValue){
            secondValue = BooleanBasedSQLi.randomValueOfLength(randomLength);
        }

        String verifyingRequest = form.getXHR(webScraper.parsePayload(parsePayloadTrueStatement(payload, secondValue)));
        ServerResponse verifyingResponse = webScraper.sendXHR(verifyingRequest);
        form.setStatusCode(verifyingResponse.getStatus());

        if(form.isApiForm() && compareAPIResponses(trueResponse, verifyingResponse)){
            String falseRequest = form.getXHR(webScraper.parsePayload(parsePayloadFalseStatement(payload, firstValue, secondValue)));
            ServerResponse falseResponse = webScraper.sendXHR(falseRequest);
            form.setStatusCode(falseResponse.getStatus());

            if(!compareAPIResponses(trueResponse, falseResponse)){
                BooleanBasedSQLiReport report = new BooleanBasedSQLiReport();
                report.addRequest(trueRequest);
                report.addRequest(falseRequest);
                report.addResponse(trueResponse.getResponseText());
                report.addResponse(falseResponse.getResponseText());
                report.addVulnerableInput(form.nextInjectableInput());
                report.setPayloadId(String.valueOf(this.getId()));
                report.setFormId(form.getId());
                return report;
            }
        } else if (compareResponses(trueResponse, verifyingResponse)){
            String falseRequest = form.getXHR(webScraper.parsePayload(parsePayloadFalseStatement(payload, firstValue, secondValue)));
            ServerResponse falseResponse = webScraper.sendXHR(falseRequest);
            form.setStatusCode(falseResponse.getStatus());
            if(!compareResponses(trueResponse, falseResponse)){
                BooleanBasedSQLiReport report = new BooleanBasedSQLiReport();
                report.addRequest(trueRequest);
                report.addRequest(falseRequest);
                report.addResponse(trueResponse.getResponseText());
                report.addResponse(falseResponse.getResponseText());
                report.addVulnerableInput(form.nextInjectableInput());
                report.setPayloadId(String.valueOf(this.getId()));
                report.setFormId(form.getId());
                return report;
            }
        }

        return null;
    }

    public static boolean compareResponses(ServerResponse response, ServerResponse otherResponse){
        return  WebSyntaxWrapper.getUrlFromGETRequest(response.getResponseURL()).equals(WebSyntaxWrapper.getUrlFromGETRequest(otherResponse.getResponseURL()))
                && response.getStatus() == otherResponse.getStatus()
                && response.getResponseText().length() == otherResponse.getResponseText().length();
    }

    public static boolean compareAPIResponses(ServerResponse response, ServerResponse otherResponse){
        return  response.getResponseText().length() == otherResponse.getResponseText().length();
    }

    public static int randomValue(int lowerBound, int upperBound){
        return new SecureRandom().nextInt(lowerBound, upperBound);
    }

    public static int powerOfTen(int exponent){
        return Integer.parseInt("1" + "0".repeat(exponent));
    }

    public static int randomValueOfLength(int length){
        return randomValue(powerOfTen(length-1), powerOfTen(length));
    }

    public static String parsePayloadTrueStatement(String payload, int value){
        return payload.replaceAll("##first_value##", String.valueOf(value)).replaceAll("##second_value##", String.valueOf(value));
    }

    public static String parsePayloadFalseStatement(String payload, int firstValue, int secondValue){
        return payload.replaceAll("##first_value##", String.valueOf(firstValue)).replaceAll("##second_value##", String.valueOf(secondValue));
    }

}
