package es.urjc.Vulnerabilities.FormBased.Injection.XSS;

import es.urjc.Report.Vulnerabilities.FormBased.Injection.XSS.ReflectedXSSReport;
import es.urjc.Scanner.Security.WebScraper;
import es.urjc.Vulnerabilities.FormBased.Injection.Injection;
import es.urjc.WebElements.Form.FillStrategies.FillAllStrings;
import es.urjc.WebElements.Form.FillStrategies.FillStrategy;
import es.urjc.WebElements.Form.Form;
import es.urjc.Report.Report;
import es.urjc.WebElements.ServerResponse;
import org.openqa.selenium.logging.LogEntry;

import javax.persistence.Entity;
import java.util.ArrayList;
import java.util.List;

@Entity
public class XSSInjection extends Injection {

    public XSSInjection(){
        super("");
    }

    public XSSInjection(String payload){
        super(payload);
    }

    @Override
    public FillStrategy getFillStrategy(Form form) {
        return new FillAllStrings(form);
    }

    @Override
    public Report detect(WebScraper webScraper, Form form) {
        if(!webScraper.isInsideDomain(webScraper.getCurrentUrl())){
            webScraper.visitInitUrl();
        }
        String xmlHttpRequest = form.getXHR(webScraper.parsePayload(super.parsePayload()));
        ServerResponse response = webScraper.sendXHR(xmlHttpRequest);
        form.setStatusCode(response.getStatus());

        if(response.isValidResponse()){
            webScraper.visualizeHTMLContent(response.getResponseText());
            List<String> xssLogs = XSSInjection.isXSSPresent(webScraper.getLogs(), webScraper.getId(), "console-api");
            webScraper.visitInitUrl();
            if(!xssLogs.isEmpty()){
                ReflectedXSSReport report = new ReflectedXSSReport();
                report.addRequest(response.getRequest());
                report.addResponse(response.getResponseText());
                for (String xssLog: xssLogs) {
                    report.setFormId(xssLog.split("-")[2]);
                    report.addVulnerableInput(xssLog.split("-")[3]);
                    report.setPayloadId(xssLog.split("-")[4]);
                }
                return report;
            }
        }
        return null;
    }

    public static List<String> isXSSPresent(List<LogEntry> logs, String webScraperId, String url){
        List<String> xssVulnerableFields = new ArrayList<>();
        for (LogEntry log: logs) {
            String message = log.getMessage();
            if(message.startsWith(url)){
                message = message.substring(message.indexOf("\"")+1, message.length()-1);
                if(message.startsWith(webScraperId)) xssVulnerableFields.add(message);
            }
        }
        return xssVulnerableFields;
    }

}
