package es.urjc.WebController;

import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased.BooleanBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased.BooleanBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased.ErrorBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased.ErrorBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.TimeBased.TimeBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.TimeBased.TimeBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.XSS.XSSInjection;
import es.urjc.Vulnerabilities.FormBased.Injection.XSS.XSSService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api")
public class VulnerabilityScannerRestController {

    @Autowired
    private BooleanBasedSQLiService booleanBasedSQLiService;

    @Autowired
    private ErrorBasedSQLiService errorBasedSQLiService;

    @Autowired
    private TimeBasedSQLiService timeBasedSQLiService;

    @Autowired
    private XSSService xssService;

    @GetMapping("/XSS/{id}")
    public ResponseEntity<String> getXSSPayloadById(@PathVariable long id){
        List<XSSInjection> injection = this.xssService.findById(new Long[]{id});
        if(injection.size() == 1){
            return new ResponseEntity<>(injection.get(0).getPayload(), HttpStatus.OK);
        } else  return new ResponseEntity<>(HttpStatus.CONFLICT);

    }

    @GetMapping("/SQLi_TimeBased/{id}")
    public ResponseEntity<String> getTimeBasedSQLPayloadById(@PathVariable long id){
        List<TimeBasedSQLi> injection = this.timeBasedSQLiService.findById(new Long[]{id});
        if(injection.size() == 1){
            return new ResponseEntity<>(injection.get(0).getPayload(), HttpStatus.OK);
        } else return new ResponseEntity<>(HttpStatus.CONFLICT);
    }

    @GetMapping("/SQLi_ErrorBased/{id}")
    public ResponseEntity<String> getErrorBasedSQLPayloadById(@PathVariable long id){
        List<ErrorBasedSQLi> injection = this.errorBasedSQLiService.findById(new Long[]{id});
        if(injection.size() == 1){
            return new ResponseEntity<>(injection.get(0).getPayload(), HttpStatus.OK);
        } else return new ResponseEntity<>(HttpStatus.CONFLICT);
    }

    @GetMapping("/SQLi_BooleanBased/{id}")
    public ResponseEntity<String> getBlindSQLPayloadById(@PathVariable long id){
        List<BooleanBasedSQLi> injection = this.booleanBasedSQLiService.findById(new Long[]{id});
        if(injection.size() == 1){
            return new ResponseEntity<>(injection.get(0).getPayload(), HttpStatus.OK);
        } else return new ResponseEntity<>(HttpStatus.CONFLICT);
    }

}
