package es.urjc.WebController;

import com.google.gson.Gson;
import es.urjc.Scanner.Scanner;
import es.urjc.Scanner.ScannerService;
import es.urjc.Scanner.ScanningOptions;
import es.urjc.User.UserService;

import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased.BooleanBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.BooleanBased.BooleanBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased.ErrorBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.ErrorBased.ErrorBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.TimeBased.TimeBasedSQLi;
import es.urjc.Vulnerabilities.FormBased.Injection.SQLI.TimeBased.TimeBasedSQLiService;
import es.urjc.Vulnerabilities.FormBased.Injection.XSS.XSSInjection;
import es.urjc.Vulnerabilities.FormBased.Injection.XSS.XSSService;
import es.urjc.WebElements.WebSyntaxWrapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import javax.servlet.http.HttpSession;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


@Controller
public class VulnerabilityScannerController {

    @Autowired
    private UserService userService;

    @Autowired
    private BooleanBasedSQLiService blindSQLiService;

    @Autowired
    private ErrorBasedSQLiService errorBasedSQLiService;

    @Autowired
    private TimeBasedSQLiService timeBasedSQLiService;

    @Autowired
    private XSSService xssService;

    @Autowired
    private ScannerService scannerService;

    private boolean isValidSession(HttpSession session) {
        return session.getAttribute("username")!=null&&userService.isValidUser(session.getAttribute("username").toString());
    }

    private Boolean parseBoolean(String checkboxValue){
        if(checkboxValue == null) return Boolean.FALSE;
        if(checkboxValue.equals("on")) return Boolean.TRUE;
        else return Boolean.FALSE;
    }

    private Long[] deserializePayloadList(String payloadList){
        return new Gson().fromJson(payloadList, Long[].class);
    }

    @RequestMapping("/")
    public String index(Model model){
        return this.login(model);
    }

    @RequestMapping("/login.html")
    public String login(Model model){return "login";}



    @RequestMapping("/scan_configurer")
    public String scanConfigurer(Model model, HttpSession session){
        if(isValidSession(session)){
            model.addAttribute("XSSPayloads", this.xssService.findAll());
            model.addAttribute("Blind_SQLPayloads", this.blindSQLiService.findAll());
            model.addAttribute("ErrorBased_SQLPayloads", this.errorBasedSQLiService.findAll());
            model.addAttribute("TimeBased_SQLPayloads", this.timeBasedSQLiService.findAll());
            return "contract";
        } else {
            model.addAttribute("errorMessage", "Se ha producido un error");
            return "error";
        }
    }

    @RequestMapping("/start_scan")
    public String startVulnerabilityScan(Model model, HttpSession session, @RequestParam String urlToScan, @RequestParam String user,
                                         @RequestParam String password, @RequestParam(required = false) String scanAll,
                                         @RequestParam(required = false) String xssScan, @RequestParam(required = false) String sqlInjectionScan,
                                         @RequestParam(required = false) String csrfScan, @RequestParam(required = false) String apiExploration,
                                         @RequestParam(required = false) String xssPayloads, @RequestParam(required = false) String errorBasedSqlInjectionPayloads,
                                         @RequestParam(required = false) String blindSqlInjectionPayloads, @RequestParam(required = false) String timeBasedInjectionPayloads,
                                         @RequestParam(required = false) String noSecureChannel, @RequestParam(required = false) String improperErrorHandling,
                                         @RequestParam(required = false) String apiMethods, @RequestParam(required = false) String projectPath,
                                         @RequestParam(required = false) String templateInjection, @RequestParam(required = false) String entityRelations,
                                         @RequestParam(required = false) String databaseCommunication
    ) {

        if(isValidSession(session)){

            model.addAttribute("initialUrl", urlToScan);
            model.addAttribute("hasCredentials", !user.isEmpty() && !password.isEmpty());
            if(!user.isEmpty() && !password.isEmpty()) model.addAttribute("user", user);

            model.addAttribute("xssScan", xssScan);
            model.addAttribute("sqlInjectionScan", sqlInjectionScan);
            model.addAttribute("csrfScan", csrfScan);
            model.addAttribute("noSecureChannel", noSecureChannel);
            model.addAttribute("improperErrorHandling", improperErrorHandling);

            model.addAttribute("staticAnalysis", projectPath != null && !projectPath.isEmpty());
            model.addAttribute("APIMethods", apiMethods);
            model.addAttribute("TemplateInjection", templateInjection);
            model.addAttribute("EntityRelations", entityRelations);
            model.addAttribute("DataBaseCommunication", databaseCommunication);

            String baseUrl;
            try {
                baseUrl = WebSyntaxWrapper.getProtocol(urlToScan) + "://" + WebSyntaxWrapper.getBaseUrl(urlToScan);
                model.addAttribute("baseUrl", baseUrl);
            } catch (URISyntaxException e) {
                e.printStackTrace();
                return "error";
            }


            List<XSSInjection> xssInjections = new ArrayList<>();
            if(xssPayloads != null) xssInjections = this.xssService.findById(deserializePayloadList(xssPayloads));

            List<ErrorBasedSQLi> errorBasedSQLis = new ArrayList<>();
            if(errorBasedSqlInjectionPayloads != null) errorBasedSQLis = this.errorBasedSQLiService.findById(deserializePayloadList(errorBasedSqlInjectionPayloads));


            List<BooleanBasedSQLi> blindSQLis = new ArrayList<>();
            if(blindSqlInjectionPayloads != null) blindSQLis = this.blindSQLiService.findById(deserializePayloadList(blindSqlInjectionPayloads));

            List<TimeBasedSQLi> timeBasedSQLis = new ArrayList<>();
            if(timeBasedInjectionPayloads != null) timeBasedSQLis = this.timeBasedSQLiService.findById(deserializePayloadList(timeBasedInjectionPayloads));


            Scanner scanner = new Scanner(urlToScan, projectPath, new ScanningOptions(urlToScan, baseUrl, parseBoolean(scanAll), user, password, parseBoolean(xssScan), parseBoolean(sqlInjectionScan), parseBoolean(csrfScan), parseBoolean(apiExploration), xssInjections, timeBasedSQLis, errorBasedSQLis, blindSQLis, parseBoolean(noSecureChannel), parseBoolean(improperErrorHandling), parseBoolean(apiMethods), parseBoolean(templateInjection), parseBoolean(entityRelations), parseBoolean(databaseCommunication)));

            String id = this.userService.getNumberOfScansPerformed(session.getAttribute("username").toString());
            model.addAttribute("scanID", id);
            this.scannerService.addScanner(session.getAttribute("username").toString(), id, scanner);

            return "report2";
        } else {
            model.addAttribute("errorMessage", "");
            return "error";
        }

    }


    @GetMapping("/sse/{id}")
    public SseEmitter getSseEmitter(HttpSession session, @PathVariable String id){
        Scanner scanner = this.scannerService.getScanner(session.getAttribute("username").toString(), id);

        SseEmitter emitter = new SseEmitter(Long.MAX_VALUE);
        emitter.onCompletion(() -> {
            this.scannerService.removeScanner(session.getAttribute("username").toString(), scanner);
        });
        emitter.onTimeout(() -> this.scannerService.removeScanner(session.getAttribute("username").toString(), scanner));
        ExecutorService sseMvcExecutor = Executors.newCachedThreadPool();
        sseMvcExecutor.execute(() -> {
            scanner.setWebCommunicator(emitter);
            scanner.doScan();
        });

        return emitter;
    }

}
