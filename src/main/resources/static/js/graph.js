function showWebGraph(button){
	var id = "#urlMapAuthenticatedUser";
	if(button.id == "anonymous"){
		id = "#urlMapAnonymousUser";
	}
	if($(id).is(":visible")){
		$(id).hide()
	} else {
		$(id).show()
	}
}

function addCircle(nodeId, circleText, grid){
	console.log(circleText)
	var parentNode = grid.$id(nodeId);
	if (parentNode.data('isCircle') || parentNode.data('circleId'))
		return;
//    parentNode.lock();
	var px = parentNode.position('x');
	var py = parentNode.position('y');
	var circleId = (grid.nodes().size() + 1).toString();
	console.log(circleId)
	parentNode.data('circleId', circleId);
	var circle = grid.add({
		group: 'nodes',
		data: { weight: 75, id: circleId, isCircle: true },
		position: { x: px, y: py }
	}).css({
		'background-color': 'yellow',
		'height': 20,
		'width': 20,
		'shape': 'ellipse',
		'text-wrap': 'wrap',
		'text-halign': 'center',
		'text-valign': 'center',
		'label': circleText,
		'background-opacity': 0.5
	});
}

function getGraphFromRawData(map){
	array = map.split("\t")
	var graph = new Map();
	for(var i=0;i<array.length-1;i++){
		var key = array[i].split(" : ")[0];
		var value_array = array[i].split(" : ")[1];
		value_array = value_array.substr(1, value_array.length-2);
		value_array = value_array.split(", ");
		graph.set(key, value_array);
	}
	return graph;
}

function parseUrl(urlToParse, baseUrl){
	if(urlToParse === undefined) return undefined;
	console.log(urlToParse + "\t" + baseUrl + "\t" + urlToParse.includes(baseUrl))
	if(urlToParse.includes(baseUrl)){
		return urlToParse.split(baseUrl)[1];
	} else {
		var prov_url = urlToParse.replace("https://", "");
		if(prov_url === urlToParse){
			return urlToParse.replace("http://","");
		} else {
			return prov_url;
		}
	}
}

function getCytoscapeGraph(id, graph, baseUrl){
	var cy = cytoscape(
		{
			container: document.getElementById(id),
			style: [
				{
					selector: 'node',
					style: {
						shape: 'square',
						'background-color': 'red',
						'height': 40,
						'width': 40,
						label: 'data(id)'
					}
				}, {
					selector: 'edge',
					style: {
						'curve-style': 'bezier',
						'target-arrow-shape': 'triangle'
					}
				}
			]
		}
	);
	for(const entry of graph.entries()){
		var key = entry[0]
		var value = entry[1]
		cy.add({
			data: { id: parseUrl(key, baseUrl)}
		});
	}

	for(const entry of graph.entries()){
		var key = parseUrl(entry[0], baseUrl)
		var value = entry[1];
		for(var i=0;i<value.length;i++){
			var tag = value[i].split(" ")[0];
			var url = value[i].split(" ")[1];
			url = parseUrl(url, baseUrl);
			if(url !== undefined){
				if(tag === "a"){
					cy.add({
						data:{
							id: key + " " + url,
							source: key,
							target: url
						}
					});
				} else if(tag === "redirect"){
					var node = cy.$id(url);
					if(node.length == 0){
						cy.add({
							data: { id: url}
						});
					}
					cy.add({
						data:{
							id: key + " " + url,
							source: key,
							target: url
						}
					}).css({
						'curve-style': 'bezier',
						'line-color': 'blue',
						'target-arrow-color': 'blue',
						'target-arrow-shape': 'triangle'
					});
				} else if(tag === "iframe"){
					//addCircle(key, value[i][1], cy)
				}
			}
		}
	}

	cy.on("tap", "node", function(){

		if(this.__removedElements === undefined){
			var name = this[0]._private.data.id;
			var leaf_children = this.successors().targets();
			var remove_children = [];

			for(var i=0;i<leaf_children.length;i++){
				var edges = leaf_children[i][0]._private.edges;
				var is_leaf = true;
				for(var j=0;j<edges.length;j++){
					if(edges[j][0]._private.data.source !== name){
						is_leaf = false;
					}
				}
				if(is_leaf){
					remove_children.push(leaf_children[i])
				}
			}

			this.__removedElements = [];
			for(var i=0;i<remove_children.length;i++){
				this.__removedElements.push(this._private.cy.remove(remove_children[i]));
			}

			if(this.__removedElements.length != 0){
				this.css({
					shape: 'ellipse',
					'background-color': 'green',
				})
			}

		} else {

			if(this.__removedElements.length != 0){
				this.css({
					shape: 'square',
					'background-color': 'red',
				})
			}
			for(var i=0;i<this.__removedElements.length;i++){
				this.__removedElements[i].restore()
			}
			this.__removedElements = undefined
		}
	});

	cy.layout({
		name: 'circle',
		spacingFactor: 1.5
	}).run();

	return cy;
}

function rerunLayout(element){
	console.log(element.name);
	cyForAnonymous.layout({
		name: element.name,
		spacingFactor: 1.5
	}).run();
	cyForAuthenticated.layout({
		name: element.name,
		spacingFactor: 1.5
	}).run();
}

// function styleJSCode(){
// 	var code = document.getElementById("exploit").innerHTML;
// 	code = $('<textarea />').html(code).text();
// 	code = code.split(";");
// 	console.log(code)
// 	if(code.length < 16){
// 		document.getElementById("exploit").rows = code.length;
// 	} else {
// 		document.getElementById("exploit").rows = 15;
// 	}
// 	code = code.join(";\r\n");
// 	document.getElementById("exploit").innerHTML = code;
// 	document.getElementById("exploit").spellcheck = false;
// }
