var addXSSVulnerability = function(xssReport){
    var xssType = xssReport["vulnerabilityType"].substring(4);
    var formId = xssReport["formId"];
    var vulnerableInputs = xssReport["vulnerableInputs"]; // array
    var responses = xssReport["responses"];
    var requests = []
    if(xssType === "Reflected"){
        requests = xssReport["requests"];
    }

    var payloadId = xssReport["payloadId"]; // request to API

    createReport("XSS", xssType, formId, vulnerableInputs, requests, responses, payloadId);

    updateFormData("XSS", formId);
    updatePayload("XSS", null, payloadId, "XSS_" + xssType + "Payload" + getNumOfVulns("XSS"));
}

var getNumOfVulns = function(type){
    return document.getElementById(type).childElementCount;
}

var addSQLiVulnerability = function(sqliReport){
    var sqlType = sqliReport["vulnerabilityType"].substring(5);
    var formId = sqliReport["formId"];
    var vulnerableInputs = sqliReport["vulnerableInputs"]; // array
    var responses = sqliReport["responses"];
    var requests = sqliReport["requests"];

    var payloadId = sqliReport["payloadId"]; // request to API

    createReport("SQLi", sqlType, formId, vulnerableInputs, requests, responses, payloadId);

    updateFormData("SQLi", formId);
    updatePayload("SQLi", sqlType, payloadId, "SQLi_" + sqlType +"Payload" + getNumOfVulns("SQLi"));

}

var addCSRFVulnerability = function(csrfReport){
    var formId = csrfReport["formId"];
    var responses = csrfReport["responses"];
    var requests = csrfReport["requests"];

    createReport("CSRF", null, formId, [], requests, responses, "-1");

    updateFormData("CSRF", formId);
}

var addNoSecureChannelVulnerability = function(nscReport){
    var responses = nscReport["responses"];
    var requests = nscReport["requests"];

    createReport("NSC", null, null, [], requests, responses, "-1");
}

var addImproperErrorHandlingVulnerability = function(iehReport){
    var responses = iehReport["responses"];
    var requests = iehReport["requests"];

    createReport("IEH", null, null, [], requests, responses, "-1");
}

var updateFormData = function(vulnerabilityName, formId){

    var tableCell = document.getElementById(vulnerabilityName + formId);
    tableCell.innerText = "Vulnerable";
    tableCell.className = "bg-danger";

    var heading = document.getElementById("heading" + formId);
    heading.className = "card-header bg-danger";
}

var updatePayload = function(type, subtype, payloadId, pId){
    var uri = "";
    if(subtype === null) uri = type + "/" + payloadId;
    else uri = type + "_" + subtype + "/" + payloadId;

    var client = new XMLHttpRequest();
    client.onreadystatechange = function() {
        if(client.readyState == 4){
            if(client.status == 200){
                document.getElementById(pId).innerText = client.responseText;
            }
        }
    }
    client.open("GET", "https://localhost:8081/api/" +  uri, true);
    client.send();
}
var createReport = function(vulnerabilityName, vulnerabilityType, formId, vulnerableInputs, requests, responses, payloadId){
    var section = document.getElementById(vulnerabilityName);

    var container = document.createElement("div");
    container.className = "container bg-danger";

    var title = document.createElement("h2");
    title.innerText = "Reporte " + vulnerabilityName;

    container.append(title);

    var row = document.createElement("div");
    row.className = "row";

    if(vulnerabilityType !== null){
        var typeDiv = document.createElement("div");
        typeDiv.className = "col-sm";

        var typeB = document.createElement("b");
        typeB.innerText = "Tipo";

        var typeParagraph = document.createElement("p");
        typeParagraph.innerText = vulnerabilityType;

        typeDiv.append(typeB);
        typeDiv.append(typeParagraph);
        row.append(typeDiv);
    }

    var formIdDiv = document.createElement("div");
//    formIdDiv.className = "float-left";
    formIdDiv.className = "col-sm";

    if(formId != null){
        var formIdB = document.createElement("b");
        formIdB.innerText = "ID del form: ";

        var formIdParagraph = document.createElement("p");
        formIdParagraph.innerText = formId;

        formIdDiv.append(formIdB);
        formIdDiv.append(formIdParagraph);
    }
    row.append(formIdDiv);

    if(payloadId !== "-1"){

        var payloadDiv = document.createElement("div");
        payloadDiv.className = "col-sm";

        var payloadB = document.createElement("b");
        payloadB.innerText = "Payload: ";

        var numberOfVulnerabilities = getNumOfVulns(vulnerabilityName) + 1;
        var payloadParagraph = document.createElement("p");
        payloadParagraph.innerText = payloadId;
        payloadParagraph.id = vulnerabilityName + "_" + vulnerabilityType + "Payload" + numberOfVulnerabilities;

        payloadDiv.append(payloadB);
        payloadDiv.append(payloadParagraph);
        row.append(payloadDiv);
    }

    container.append(row);

    if(vulnerableInputs.length != 0){

        var vulnerableInputsDiv = document.createElement("div");
        vulnerableInputsDiv.style.textAlign = "left";
        vulnerableInputsDiv.style.paddingLeft = "15px";
        var vulnerableInputsB = document.createElement("b");
        vulnerableInputsB.innerText = "Lista de campos vulnerables: ";

        var vulnerableList = document.createElement("ul");
        for(var i=0;i<vulnerableInputs.length;i++){
            var element = document.createElement("li");
            element.innerText = vulnerableInputs[i];
            vulnerableList.append(element);
        }

        vulnerableInputsDiv.append(vulnerableInputsB);
        vulnerableInputsDiv.append(vulnerableList);
        container.append(vulnerableInputsDiv);
    }

    if(responses.length != 0){
        for(var i=0;i<responses.length;i++){
            var row = document.createElement("div");
            row.className = "row";

            var requestCol = document.createElement("div");
            requestCol.className = "col-sm";

            var responseCol = document.createElement("div");
            responseCol.className = "col-sm";

            var requestTextArea = document.createElement("textarea");
            requestTextArea.style = "width: 90%; background-color: #E1E1E1";
            if(requests.length > i) requestTextArea.value = requests[i];
            var responseTextArea = document.createElement("textarea");
            responseTextArea.style = "width: 90%; background-color: #E1E1E1";
            if(responses.length > i) responseTextArea.value = responses[i];

            requestCol.append(requestTextArea);
            responseCol.append(responseTextArea);
            row.append(requestCol);
            row.append(responseCol);

            container.append(row);
        }
    }

    section.append(container);

}

var changeStatusRequirement = function(requirement){
    var div = document.getElementById(requirement["type"]);
    var status = document.getElementById(requirement["type"] + "Status");
    if(requirement["passed"]){
        status.innerText = "OK";
        div.className = "container bg-success text-white";
    } else {
        status.innerText = "FAILED";
        div.className = "container bg-danger text-white";
    }
}

var addContext = function(context){
    var list = document.getElementById(context["type"] + "Context");
    var element = document.createElement("li");

    var aPath = document.createElement("a");
    aPath.href = context["file"];
    aPath.innerText = context["file"];
    aPath.style = "color: white;";

    var contextArea = document.createElement("textarea");
    contextArea.style = "width: 90%; background-color: #E1E1E1";

    var linesOfCode = context["context"];
    var textContext = "";
    for(var i= 0; i<linesOfCode.length;i++){
        textContext += linesOfCode[i] + "\n";
    }
    contextArea.value = textContext;

    element.append(aPath);
    element.append(contextArea);

    list.append(element);

}